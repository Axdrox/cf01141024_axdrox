/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.63).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Cliente;
import io.swagger.model.Respuesta;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-10-19T22:48:17.734915880Z[GMT]")
@Validated
public interface ClientesApi {

    @Operation(summary = "Crea un cliente.", description = "Crea un cliente.", tags={ "cliente" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Cliente creado.") })
    @RequestMapping(value = "/clientes",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createCliente(@Parameter(in = ParameterIn.DEFAULT, description = "Crea un cliente.", schema=@Schema()) @Valid @RequestBody Cliente body
);


    @Operation(summary = "Elimina cliente.", description = "El usuario sólo puede eliminar sus datos.", tags={ "cliente" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Datos incorrectos.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        
        @ApiResponse(responseCode = "404", description = "Cliente no encontrado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        
        @ApiResponse(responseCode = "200", description = "Eliminación exitosa.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) })
    @RequestMapping(value = "/clientes/{id-cliente}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Respuesta> deleteCliente(@Parameter(in = ParameterIn.PATH, description = "Identificador de un Respuesta.", required=true, schema=@Schema()) @PathVariable("id-cliente") String idCliente
);


    @Operation(summary = "Recupera un cliente.", description = "Obtiene un cliente basado en su identificador.", tags={ "cliente" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Cliente recuperado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cliente.class))),
        
        @ApiResponse(responseCode = "404", description = "Cliente no encontrado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) })
    @RequestMapping(value = "/clientes/{id-cliente}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Cliente> getCliente(@Parameter(in = ParameterIn.PATH, description = "Identificador de un cliente.", required=true, schema=@Schema()) @PathVariable("id-cliente") String idCliente
);


    @Operation(summary = "Actualiza cliente.", description = "El usuario sólo puede actualizar sus datos.", tags={ "cliente" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cliente.class))),
        
        @ApiResponse(responseCode = "400", description = "Datos incorrectos.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))),
        
        @ApiResponse(responseCode = "404", description = "Cliente no encontrado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Respuesta.class))) })
    @RequestMapping(value = "/clientes/{id-cliente}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Cliente> updateCliente(@Parameter(in = ParameterIn.PATH, description = "Identificador de un cliente.", required=true, schema=@Schema()) @PathVariable("id-cliente") String idCliente
, @Parameter(in = ParameterIn.DEFAULT, description = "Datos para actualizar el estado de un cliente", schema=@Schema()) @Valid @RequestBody Cliente body
);

}

